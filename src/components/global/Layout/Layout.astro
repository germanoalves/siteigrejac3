---
// Component imports
import { SEO } from "astro-seo"

// Style imports
import "@style/tailwind.css"

// Helper imports
import { seoConfig } from "@util/seoConfig"
import Head from '../Header/Header.astro';
import Footer from '../Footer/Footer.astro';

// Props
export interface Props {
	/** Title of the page. */
	title: string

	/** Specific OpenGraph page title. */
	ogTitle?: string

	/** Description of the page. */
	description?: string

	/** Image thumbnail for the page. */
	image?: {
		url: string
		alt: string
	}

	/** Whether or not to disable indexing */
	disableIndexing?: boolean
}

const {
	title,
	ogTitle,
	description,
	image,
	disableIndexing = false
} = Astro.props as Props
---

<html lang="en">
	<head>
		<!-- SEO. -->
		<SEO
			title={title}
			description={seoConfig.description || description}
			noindex={disableIndexing}
			nofollow={disableIndexing}
			openGraph={{
				basic: {
					title: ogTitle || title,
					type: "website",
					image: seoConfig.image.url || image.url
				},
				image: {
					width: seoConfig.image.width,
					height: seoConfig.image.height,
					alt: seoConfig.image.alt || image.alt
				},
				optional: {
					siteName: seoConfig.siteName,
					description: seoConfig.description || description
				}
			}}
			twitter={{
				card: seoConfig.twitter.card
			}}
		/>

		<!-- Global meta tags. -->
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />

		<!-- Favicons. -->
		<link
			rel="apple-touch-icon"
			sizes="57x57"
			href="/favicons/favicon-57x57.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="60x60"
			href="/favicons/favicon-60x60.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="72x72"
			href="/favicons/favicon-72x72.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="76x76"
			href="/favicons/favicon-76x76.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="114x114"
			href="/favicons/favicon-114x114.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="120x120"
			href="/favicons/favicon-120x120.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="144x144"
			href="/favicons/favicon-144x144.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="152x152"
			href="/favicons/favicon-152x152.png"
		/>
		<link
			rel="apple-touch-icon"
			sizes="180x180"
			href="/favicons/favicon-180x180.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="16x16"
			href="/favicons/favicon-16x16.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="32x32"
			href="/favicons/favicon-32x32.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="96x96"
			href="/favicons/favicon-96x96.png"
		/>
		<link
			rel="icon"
			type="image/png"
			sizes="192x192"
			href="/favicons/favicon-192x192.png"
		/>
		<link
			rel="shortcut icon"
			type="image/x-icon"
			href="/favicons/favicon.ico"
		/>
		<link rel="icon" type="image/x-icon" href="/favicons/favicon.ico" />
		<meta name="msapplication-TileColor" content="#30E130" />
		<meta
			name="msapplication-TileImage"
			content="/favicons/favicon-144x144.png"
		/>
		<meta name="msapplication-config" content="/browserconfig.xml" />
		<link rel="icon" type="image/svg+xml" href="/favicons/favicon.svg" />
		<meta name="theme-color" content="#30E130" />

		<!-- Service worker registration. -->

		<script is:inline src="/registerSW.js"></script>
		<link rel="manifest" href="/manifest.webmanifest" />
	</head>
	<body class="min-h-screen flex flex-col w-full overflow-x-hidden dark:bg-gray-600">
		<Head>
			<!-- Configurações do cabeçalho, títulos, metadados, etc. -->
		  </Head>
		<main class="flex flex-1 flex-col h-[100%] w-full">
			<slot />
		</main>

		<script>
			// This is a hack to get vite-plugin-pwa to generate a sw.js file.
			// Do not remove this script tag.
		</script>
		<script>
			const switchTheme = document.querySelector(
			  "[data-switch-theme]"
			) as HTMLButtonElement;
		
			if (
			  localStorage.getItem("appTheme") === "dark" ||
			  (!("appTheme" in localStorage) &&
				window.matchMedia("(prefers-color-scheme: dark)").matches)
			) {
			  document.documentElement.classList.add("dark");
			} else {
			  document.documentElement.classList.remove("dark");
			}
			if (switchTheme) {
			  switchTheme.addEventListener("click", (e) => {
				e.preventDefault();
				const doc = document.documentElement;
				if (doc) {
				  if (localStorage.getItem("appTheme")) {
					if (localStorage.getItem("appTheme") === "light") {
					  doc.classList.add("dark");
					  localStorage.setItem("appTheme", "dark");
					} else {
					  document.documentElement.classList.remove("dark");
					  localStorage.setItem("appTheme", "light");
					}
				  } else {
					if (doc.classList.contains("dark")) {
					  doc.classList.remove("dark");
					  localStorage.setItem("appTheme", "light");
					} else {
					  doc.classList.add("dark");
					  localStorage.setItem("appTheme", "dark");
					}
				  }
				}
			  });
			}
		  </script>
		  <script>
			const toggleMenu = document.querySelector(
			  "[data-toggle-nav]"
			) as HTMLButtonElement;
			const navbar = document.querySelector("[data-navbar]") as HTMLDivElement;
			const overlayNav = document.querySelector(
			  "[data-nav-overlay]"
			) as HTMLDivElement;
			if (toggleMenu) {
			  toggleMenu.addEventListener("click", (e) => {
				e.preventDefault();
				if (toggleMenu.getAttribute("data-open-nav") === "false") {
				  toggleMenu.setAttribute("data-open-nav", "true");
				  overlayNav.setAttribute("data-is-visible", "true");
				  document.body.classList.add("!overflow-y-hidden");
				  navbar.style.height = `${navbar.scrollHeight}px`
		
				}else{
					toggleMenu.setAttribute("data-open-nav", "false");
					overlayNav.setAttribute("data-is-visible", "false");
					document.body.classList.remove("!overflow-y-hidden");
					  navbar.style.height = "0px"
				}
				
				
			  });
		
			  overlayNav.addEventListener("click", (e) => {
				e.preventDefault();
				toggleMenu.setAttribute("data-open-nav", "false");
					overlayNav.setAttribute("data-is-visible", "false");
					document.body.classList.remove("!overflow-y-hidden");
					  navbar.style.height = "0px"
			  });
			}
		  </script>
		<Footer></Footer>
	</body>
</html>
<style is:global>
	:root {
	  --color-bg: 255 255 255;
	  --color-border: 255 255 255;
	  --color-box: 255 255 255;
	  --box-border: 229 231 235;
	  --box-sd: 226 232 240 / 0.5;
	  --heading-1:  23 37 84;
	  --heading-2: 31 41 55;
	  --heading-3: 55 65 81;
	}
  
	.dark {
	  --color-bg: 3 7 18;
	  --color-box: 17 24 39;
	  --box-border: 243 244 246/0.1;
	  --box-sd: transparent;
  
	  
	  --heading-1:  255 255 255;
	  --heading-2:  243 244 246;
	  --heading-3:  209 213 219;
	}
  
	html{
	  scroll-behavior: smooth;
	}
	body {
	  font-family: "Raleway", sans-serif;
	}
  
	[data-toggle-nav][data-open-nav="true"] #line1 {
	  transform: translateY(0.375rem) rotate(40deg);
	}
	[data-toggle-nav][data-open-nav="true"] #line2 {
	  transform: scaleX(0);
	  opacity: 0;
	}
	[data-toggle-nav][data-open-nav="true"] #line3 {
	  transform: translateY(-0.375rem) rotate(-40deg);
	}
  
	
	[data-nav-overlay][data-is-visible="true"] {
	  visibility: visible;
	  display: flex;
	}
  </style>